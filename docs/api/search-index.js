var searchIndex={};
searchIndex["envmnt"] = {"doc":"envmnt","i":[[5,"exists","envmnt","Returns true environment variable is defined.",null,[[["asref",["osstr"]],["osstr"]],["bool"]]],[5,"remove","","Removes the provided environment variable.",null,[[["asref",["osstr"]],["osstr"]]]],[5,"get_remove","","Removes the provided environment variable and returns its…",null,[[["asref",["osstr"]],["osstr"]],[["option",["string"]],["string"]]]],[5,"remove_all","","Removes all provided environment variables.",null,[[["vec"]]]],[5,"get_or","","Returns the environment variable value or if is not…",null,[[["asref",["osstr"]],["osstr"],["str"]],["string"]]],[5,"get_or_panic","","Returns the environment variable value. If the variable is…",null,[[["asref",["osstr"]],["osstr"]],["string"]]],[5,"get_any","","Returns the first environment variable found.",null,[[["str"],["vec"]],["string"]]],[5,"is_or","","Returns false if environment variable value if falsy. Any…",null,[[["asref",["osstr"]],["osstr"],["bool"]],["bool"]]],[5,"is","","Returns false if environment variable value if falsy. The…",null,[[["asref",["osstr"]],["osstr"]],["bool"]]],[5,"set","","Sets the environment variable value.",null,[[["asref",["osstr"]],["osstr"]]]],[5,"set_bool","","Sets the environment variable with a true/false value as…",null,[[["asref",["osstr"]],["osstr"],["bool"]]]],[5,"set_optional","","Sets the environment variable if the provided option…",null,[[["asref",["osstr"]],["osstr"],["option"]],["bool"]]],[5,"set_or_remove","","Sets the environment variable if the provided option…",null,[[["asref",["osstr"]],["osstr"],["option"]],["bool"]]],[5,"get_set","","Sets the environment variable value and returns the…",null,[[["asref",["osstr"]],["osstr"]],[["option",["string"]],["string"]]]],[5,"vars","","Returns all environment variables as a vector.",null,[[],["vec"]]],[5,"is_equal","","Returns true if the provided environment variable is…",null,[[["asref",["osstr"]],["osstr"],["str"]],["bool"]]],[5,"contains","","Returns true if the provided environment variable is…",null,[[["asref",["osstr"]],["osstr"],["str"]],["bool"]]],[5,"contains_ignore_case","","Returns true if the provided environment variable is…",null,[[["asref",["osstr"]],["osstr"],["str"]],["bool"]]],[5,"set_list","","Sets the provided string vector as an environment variable.",null,[[["asref",["osstr"]],["osstr"],["vec"]]]],[5,"get_list","","Returns the requested environment variable as a string…",null,[[["asref",["osstr"]],["osstr"]],[["vec",["string"]],["option",["vec"]]]]],[5,"set_list_with_options","","Sets the provided string vector as an environment variable.",null,[[["asref",["osstr"]],["osstr"],["vec"],["listoptions"]]]],[5,"get_list_with_options","","Returns the requested environment variable as a string…",null,[[["asref",["osstr"]],["osstr"],["listoptions"]],[["vec",["string"]],["option",["vec"]]]]],[5,"set_all","","Sets all the provided env key/value pairs.",null,[[["indexmap"]]]],[5,"evaluate_and_set_all","","Sets all the provided env key/value pairs.",null,[[["indexmap"],["f"]]]],[5,"is_any_exists","","Returns true if any of environment variables is defined.",null,[[["vec"]],["bool"]]],[5,"is_all_exists","","Returns true if all of environment variables are defined.",null,[[["vec"]],["bool"]]],[5,"load_file","","Parses the provided env file and loads all environment…",null,[[["str"]],[["result",["envmnterror"]],["envmnterror"]]]],[5,"evaluate_and_load_file","","Parses the provided env file and loads all environment…",null,[[["f"],["str"]],[["result",["envmnterror"]],["envmnterror"]]]],[5,"parse_file","","Parses the provided env file and returns its content as a…",null,[[["str"]],[["result",["indexmap","envmnterror"]],["indexmap",["string","string"]],["envmnterror"]]]],[5,"expand","","Expands the provided string value by replacing the…",null,[[["option",["expandoptions"]],["str"],["expandoptions"]],["string"]]],[0,"types","","types",null,null],[3,"ListOptions","envmnt::types","Get/Set list options",null,null],[12,"separator","","The separator used to merge/split the values",0,null],[12,"ignore_empty","","if true, empty list will not be set and empty string will…",0,null],[3,"ExpandOptions","","Expand options",null,null],[12,"expansion_type","","The expansion type (unix/windows/...)",1,null],[12,"default_to_empty","","if true (default), empty variables will be replaced with…",1,null],[4,"ExpansionType","","Expansion Type - unix/windows style",null,null],[13,"UnixPrefix","","Unix prefix environment style, for example: $MY_ENV",2,null],[13,"UnixBrackets","","Unix brackets environment style, for example: ${MY_ENV}",2,null],[13,"Unix","","All unix supported styles",2,null],[13,"Windows","","Windows environment style, for example: %MY_ENV%",2,null],[13,"OS","","Current OS supported styles (Unix/Windows)",2,null],[13,"All","","All supported styles for all platforms",2,null],[11,"new","","Creates and returns a new instance.",0,[[],["listoptions"]]],[11,"new","","Creates and returns a new instance.",1,[[],["expandoptions"]]],[11,"clone_with_expansion_type","","Clones and modifies the expansion type",1,[[["expandoptions"],["expansiontype"]],["expandoptions"]]],[6,"ListOptions","envmnt","Get/Set list options",null,null],[6,"ExpansionType","","Expansion Type - unix/windows style",null,null],[6,"ExpandOptions","","Expand options",null,null],[11,"from","envmnt::types","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["t"],["self"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["t"],["self"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["t"],["self"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["listoptions"]]],[11,"clone","","",2,[[["self"]],["expansiontype"]]],[11,"clone","","",1,[[["self"]],["expandoptions"]]],[11,"eq","","",2,[[["expansiontype"],["self"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"p":[[3,"ListOptions"],[3,"ExpandOptions"],[4,"ExpansionType"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);